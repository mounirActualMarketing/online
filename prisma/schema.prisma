// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  payments    Payment[]
  assessments UserAssessment[]
  progress    UserProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  transactionRef  String        @unique
  cartId          String
  amount          Float
  currency        String        @default("SAR")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  cardType        String?
  responseCode    String?
  responseMessage String?
  transactionTime DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AssessmentSection {
  id          String @id @default(cuid())
  title       String
  description String
  content     String @db.Text
  order       Int
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userProgress UserProgress[]
  activities   Activity[]

  @@unique([order])
}

model Activity {
  id          String       @id @default(cuid())
  sectionId   String
  title       String
  description String?
  type        ActivityType
  content     String       @db.Text
  order       Int
  isRequired  Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  section   AssessmentSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  responses UserResponse[]

  @@unique([sectionId, order])
}

model UserAssessment {
  id        String           @id @default(cuid())
  userId    String
  status    AssessmentStatus @default(NOT_STARTED)
  startedAt DateTime?
  completedAt DateTime?
  score     Float?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model UserProgress {
  id          String          @id @default(cuid())
  userId      String
  sectionId   String
  status      SectionStatus   @default(NOT_STARTED)
  startedAt   DateTime?
  completedAt DateTime?
  score       Float?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  section AssessmentSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([userId, sectionId])
}

model UserResponse {
  id         String   @id @default(cuid())
  userId     String
  activityId String
  response   String   @db.Text
  isCorrect  Boolean?
  score      Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum AssessmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum SectionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  LOCKED
}

enum ActivityType {
  READING
  WRITING
  LISTENING
  SPEAKING
  VOCABULARY
  GRAMMAR
  REFLECTION
  PRACTICE
}